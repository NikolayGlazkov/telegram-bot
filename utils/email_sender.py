# utils/email_sender.py
import smtplib
import logging
from email.mime.text import MIMEText
from email.header import Header
from dotenv import dotenv_values

config = dotenv_values(".env")
logger = logging.getLogger(__name__)

def generate_email_text(trade_data: dict) -> str:
    manager_name = trade_data.get('arbitrator_name')
    if manager_name and '(' in manager_name:
        manager_name = manager_name.split('(')[0].strip()
    if not manager_name:
        manager_name = trade_data.get('debtor_name', '–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) –∫–æ–ª–ª–µ–≥–∞')

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ None ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    message_number = trade_data.get("message_number", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    if message_number is None:
        message_number = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    debtor_name = trade_data.get("debtor_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    if debtor_name is None:
        debtor_name = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    debtor_inn = trade_data.get("debtor_inn", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    if debtor_inn is None:
        debtor_inn = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    lots_text = ""
    if trade_data.get('lots'):
        for lot in trade_data['lots']:
            lot_number = lot.get('lot_number', '‚Äì')
            description = lot.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            price_value = lot.get('price')

            try:
                price = f"{float(price_value):,.0f}".replace(",", " ") if price_value else "0"
            except (TypeError, ValueError):
                price = "—É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

            lots_text += f"{lot_number}. {description} ‚Äî {price} —Ä—É–±.\n"
    else:
        lots_text = "–õ–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã."

    return f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —É–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {manager_name},

–ü—Ä–æ—à—É –≤–∞—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª–æ—Ç–∞–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ –ï–§–†–°–ë.
‚Ññ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_number}
–î–æ–ª–∂–Ω–∏–∫: {debtor_name}
–ò–ù–ù: {debtor_inn}

–ê –∏–º–µ–Ω–Ω–æ:

{lots_text.strip()}

- –ù–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞ –∏–º—É—â–µ—Å—Ç–≤–∞.
- –°–∫–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–º—É—â–µ—Å—Ç–≤–∞.
- –§–æ—Ç–æ –∏–º—É—â–µ—Å—Ç–≤–∞.
- –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ì–ª–∞–∑–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
–¢–µ–ª–µ—Ñ–æ–Ω: 8 937 741-95-82
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—á—Ç–∞: vanohaker@yandex.ru
"""



async def send_request_email(trade_data: dict, user_id: int = None) -> bool:
    sender = "gn9377419582@gmail.com"
    password = config.get("EMAIL_PASSWORD")
    recipient_emails = trade_data.get("emails")

    if not recipient_emails:
        logger.warning(f"–ù–µ—Ç email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–¥–µ–ª–∫–µ {trade_data['id']}")
        return False

    # –ü–∞—Ä—Å–∏–º –≤—Å–µ email
    recipients = [email.strip() for email in recipient_emails.split(",") if "@" in email]
    if not recipients:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ email: {recipient_emails}")
        return False

    try:
        msg_text = generate_email_text(trade_data)
        msg = MIMEText(msg_text, "plain", "utf-8")
        msg["Subject"] = Header(f"–ó–∞–ø—Ä–æ—Å –ø–æ –ª–æ—Ç–∞–º –¥–æ–ª–∂–Ω–∏–∫–∞ {trade_data.get('debtor_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}", "utf-8")
        msg["From"] = sender
        msg["To"] = ", ".join(recipients)  # –í—Å–µ email –≤ –ø–æ–ª–µ To

        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender, password)
            server.sendmail(sender, recipients, msg.as_string())
            logger.info(f"üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: {recipients}")
        return True

    except smtplib.SMTPAuthenticationError:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
        return False
    except smtplib.SMTPException as e:
        logger.error(f"‚ùå SMTP –æ—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}", exc_info=True)
        return False