# handlers/start.py
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from database.dao import get_new_direct_trades_for_user, mark_trade_as_viewed
from keyboards import main_reply_keyboard, item_inline_keyboard
from utils.tasks import user_tasks  # ‚Üê –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º user_tasks —Å—é–¥–∞
import asyncio
import logging

router = Router()

logger = logging.getLogger(__name__)

def format_trade_message(trade_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    """
    msg_parts = ["üì¢ <b>–ù–û–í–ê–Ø –ü–†–Ø–ú–ê–Ø –°–î–ï–õ–ö–ê !!!!!!------!!!!!!</b>\n"]

    # –°—Å—ã–ª–∫–∞
    if trade_data.get('url'):
        msg_parts.append(f"\nüîó –°—Å—ã–ª–∫–∞: {trade_data['url']}\n")

    # –ù–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    if trade_data.get('message_number'):
        msg_parts.append(f"#‚É£ –ù–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {trade_data['message_number']}")

    # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    pub_date = trade_data.get('publication_date')
    if pub_date:
        if hasattr(pub_date, 'strftime'):
            formatted_date = pub_date.strftime('%d.%m.%Y')
        else:
            formatted_date = str(pub_date)
        msg_parts.append(f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {formatted_date}")

    # –î–æ–ª–∂–Ω–∏–∫
    if trade_data.get('debtor_name'):
        msg_parts.append(f"üë§ –î–æ–ª–∂–Ω–∏–∫: {trade_data['debtor_name']}")
    if trade_data.get('debtor_inn'):
        msg_parts.append(f"üî¢ –ò–ù–ù –¥–æ–ª–∂–Ω–∏–∫–∞: {trade_data['debtor_inn']}")

    # –í–∏–¥ —Ç–æ—Ä–≥–æ–≤ –∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if trade_data.get('auction_type'):
        msg_parts.append(f"‚öñÔ∏è –í–∏–¥ —Ç–æ—Ä–≥–æ–≤: {trade_data['auction_type']}")
    if trade_data.get('place_of_conduct'):
        msg_parts.append(f"üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {trade_data['place_of_conduct']}")

    # –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
    start_apps = trade_data.get('start_applications')
    if start_apps:
        if hasattr(start_apps, 'strftime'):
            formatted_time = start_apps.strftime('%d.%m.%Y %H:%M')
        else:
            formatted_time = str(start_apps)
        msg_parts.append(f"‚è≥ –ù–∞—á–∞–ª–æ –∑–∞—è–≤–æ–∫: {formatted_time}")

    end_apps = trade_data.get('end_applications')
    if end_apps:
        if hasattr(end_apps, 'strftime'):
            formatted_time = end_apps.strftime('%d.%m.%Y %H:%M')
        else:
            formatted_time = str(end_apps)
        msg_parts.append(f"‚åõ –ö–æ–Ω–µ—Ü –∑–∞—è–≤–æ–∫: {formatted_time}")

    # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π
    if trade_data.get('arbitrator_name'):
        msg_parts.append(f"üßë‚Äç‚öñÔ∏è –ê—Ä–±–∏—Ç—Ä: {trade_data['arbitrator_name']}")
    if trade_data.get('arbitrator_inn'):
        msg_parts.append(f"üî¢ –ò–ù–ù –∞—Ä–±–∏—Ç—Ä–∞: {trade_data['arbitrator_inn']}")
    if trade_data.get('emails'):
        msg_parts.append(f"üìß Email: {trade_data['emails']}")

    # –õ–æ—Ç—ã
    lots = trade_data.get('lots', [])
    if lots:
        msg_parts.append("\nüì¶ <b>–õ–û–¢–´:</b>\n")
        for lot in lots:
            lot_number = lot.get('lot_number', '‚Äì')
            description = lot.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            price_value = lot.get('price')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            try:
                price_float = float(price_value) if price_value not in (None, '') else 0.0
                price_str = f"{price_float:,.0f}".replace(",", " ")
            except (ValueError, TypeError):
                price_str = "0"

            msg_parts.append(f"{lot_number}. {description} ‚Äî <b>{price_str} —Ä—É–±.</b>")

    return "\n".join(msg_parts)



async def send_trades_to_user(bot, user_id):
    iteration_count = 0
    while True:
        iteration_count += 1
        try:
            logger.info(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration_count}: –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–¥–µ–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª
            trades = await get_new_direct_trades_for_user(user_id, limit=5)
            logger.info(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")

            if not trades:
                logger.info(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç")
            else:
                for trade in trades:
                    try:
                        msg_text = format_trade_message(trade)
                        sent_message = await bot.send_message(
                            chat_id=user_id,
                            text=msg_text,
                            parse_mode="HTML",
                            reply_markup=item_inline_keyboard(trade['id'])
                        )
                        logger.info(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {trade['id']} (message_id: {sent_message.message_id})")

                        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–¥–µ–ª–∫—É
                        await mark_trade_as_viewed(user_id, trade['id'])

                    except Exception as send_error:
                        logger.error(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–¥–µ–ª–∫–∏ {trade['id']}: {send_error}", exc_info=True)

        except Exception as e:
            logger.error(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}", exc_info=True)

        await asyncio.sleep(20)


@router.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –æ—Ç–ø—Ä–∞–≤–∏–ª /start")

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä—è–º—ã—Ö —Å–¥–µ–ª–∫–∞—Ö...",
        reply_markup=main_reply_keyboard()
    )

    # –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏
    if user_id in user_tasks:
        old_task = user_tasks[user_id]
        if not old_task.done():
            old_task.cancel()
        del user_tasks[user_id]
        logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")

    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    task = asyncio.create_task(send_trades_to_user(message.bot, user_id))
    user_tasks[user_id] = task
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")