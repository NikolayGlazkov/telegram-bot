# handlers/inline.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.dao import get_trade_by_id
from utils.email_sender import send_request_email
import logging

router = Router()
logger = logging.getLogger(__name__)  # ‚úÖ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å logger


@router.callback_query(F.data.startswith("request_"))
async def handle_request(callback: CallbackQuery):
    item_id = callback.data.split("_")[1]
    await callback.answer(f"–ó–∞—è–≤–∫–∞ –¥–ª—è {item_id} —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!", show_alert=True)


@router.callback_query(F.data.startswith("send_request_"))
async def handle_send_request(callback: CallbackQuery):
    try:
        trade_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        username = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {trade_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "—á–∞—Å–∏–∫–∏"
        await callback.answer("üì© –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å...", show_alert=False)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        trade_data = await get_trade_by_id(trade_id)
        
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if trade_data:
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ {trade_id}: {list(trade_data.keys())}")
        else:
            logger.warning(f"–°–¥–µ–ª–∫–∞ {trade_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        success = await send_request_email(trade_data)

        # –ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è
        remaining_buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"request_{trade_id}")],
            [InlineKeyboardButton(text="‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{trade_id}")]
        ])

        if success:
            await callback.message.edit_text(
                f"{callback.message.html_text}\n\n"
                "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n"
                "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º—É —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ.",
                parse_mode="HTML",
                reply_markup=remaining_buttons
            )
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ —Å–¥–µ–ª–∫–µ {trade_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await callback.message.edit_text(
                f"{callback.message.html_text}\n\n"
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.</b>\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
                reply_markup=remaining_buttons
            )
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ —Å–¥–µ–ª–∫–µ {trade_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {trade_id}: {e}", exc_info=True)
        try:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except:
            pass


@router.callback_query(F.data.startswith("favorite_"))
async def handle_favorite(callback: CallbackQuery):
    item_id = callback.data.split("_")[1]
    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {item_id}", show_alert=True)